#!/usr/bin/env python3

import os
import sys
import json
import subprocess
import argparse
import re
import getpass
import datetime

def get_py_versions():
    captureCommand = "/sw/local/bin/toolchains | grep Python > captured-output.txt"
    removeCommand = "rm captured-output.txt"
    subprocess.run(captureCommand, shell=True)
    py_versions = {}
    tc_versions = {}
    with open("captured-output.txt", "r") as file:
        next(file)
        # Grabbing the Python version and mapping it to corresponding GCC version
        for line in file:
            words = line.split()
            tc_versions[words[0]]  = [words[2], words[6]] 
            if words[6] in py_versions:
                continue
            else:
                py_versions[words[6]] = words[2]
    subprocess.run(removeCommand, shell=True)
    return [py_versions, tc_versions]

def add_virtualvenv(path_to_venv, desc, user_python_version):
    venv_name = os.path.basename(path_to_venv.rstrip('/'))
    scratch = os.environ.get('SCRATCH')
    centralized_path = os.path.join(scratch, 'virtual_envs', venv_name)

    print(f"Adding virtual environment '{venv_name}' to manager...")
    move_command = f"mv {path_to_venv} {centralized_path}"
    subprocess.run(move_command, shell=True)

    symlink_command = f"ln -s {centralized_path} {path_to_venv}"
    subprocess.run(symlink_command, shell=True)

    _versions = get_py_versions()
    versions = _versions[0]
    python_key = f"Python/{user_python_version}"
    if python_key not in versions:
        print(f"Error: Python version {user_python_version} not available in toolchains.")
        print(f"Available versions: {', '.join(versions.keys())}")
        sys.exit(1)

    gcccore_version = versions[python_key]

    scratch = os.environ.get('SCRATCH')
    metadata_file = os.path.join(scratch, 'virtual_envs', 'metadata.json')
    update_metadata(metadata_file, venv_name, python_key, gcccore_version, toolchain='', description=desc)

    print(f"{venv_name} added to the manager, run 'list_venvs' to see all environments in the manager")
    print(f"'source activate_venv {venv_name}' to activate.")

    logfilePath = os.path.join('/sw/hprc/sw/dor-hprc-venv-manager/logs/venv.log')
    try:
        logfile = open(logfilePath,'a')
        username = getpass.getuser()
        today = datetime.date.today()
        logString = f"{today} {username} add_venv {venv_name}\n"
        logfile.write(logString)
    except Exception as e:
        print(f"Error: {e}")
        print("This action was not logged")
        sys.exit(1)

def update_metadata(metadata_file, venv_name, python_version, gcccore_version, toolchain, description):
    """Updates the metadata JSON file with the environment name, Python and GCCcore versions, and description."""
    # Load or initialize metadata
    if os.path.exists(metadata_file):
        with open(metadata_file, 'r') as f:
            metadata = json.load(f)
    else:
        metadata = {"environments": []}

    # Add the new environment entry
    metadata["environments"].append({
        "name": venv_name,
        "python_version": python_version,
        "GCCcore_version": gcccore_version,
        "description": description,
        "toolchain": toolchain
    })

    # Write updated metadata back to the file
    with open(metadata_file, 'w') as f:
        json.dump(metadata, f, indent=4)

def main():
    parser = argparse.ArgumentParser(
        description="Add existing Python virtual environment to manager."
    )
    parser.add_argument(
        "venv_path",
        help="Path of the current virtual environment (no spaces or special characters)"
    )
    parser.add_argument(
        "python_version",
        help="Specify the Python version that this venv should be created for"
    )
    parser.add_argument(
        "-d", "--description",
        help="Optional description of the environment",
        default=""
    )

    args = parser.parse_args()

    print(args)
    add_virtualvenv(args.venv_path, args.description, args.python_version)

if __name__ == "__main__":
    main()

