#!/usr/bin/env python3

# Created 11-15-24 by Gabriel Floreslovo
# This script deletes a python virtual environment from a user's list of
# environments made by the HPRC create_venv tool
# Updated to support shared group environments using centralized metadata utilities

import subprocess
import argparse
import sys
import os
import getpass
import datetime

from utils import (
    find_environment_by_name,
    get_environment_path,
    remove_environment_from_metadata
)


def delete_environment(env_to_remove, skip_confirmation=False):
    """Delete a virtual environment and its metadata."""

    # Find the environment across all accessible sources
    source_type, source_name, env_dict = find_environment_by_name(env_to_remove)

    if source_type is None:
        print(f"Error: '{env_to_remove}' does not exist in your current environment list.")
        print("Use 'list_venvs' to see all available environments.")
        sys.exit(1)

    # Get the environment path
    try:
        env_path = get_environment_path(env_to_remove, source_type, source_name)
    except Exception as e:
        print(f"Error determining environment path: {e}")
        sys.exit(1)

    # Confirm the environment location
    location_desc = f"your $SCRATCH" if source_type == 'user' else f"group '{source_name}'"
    print(f"Found environment '{env_to_remove}' in {location_desc}")

    # Note: Permission checking is handled by group filesystem permissions
    # Users in the group should be able to delete any environment in that group

    # Show environment details and prompt for confirmation (unless skipped)
    print(f"\nEnvironment details:")
    print(f"  Name: {env_dict.get('name', 'N/A')}")
    print(f"  Description: {env_dict.get('description', 'N/A')}")
    print(f"  Python Version: {env_dict.get('python_version', 'N/A')}")
    print(f"  Location: {location_desc}")
    if source_type == 'group':
        print(f"  Owner: {env_dict.get('owner', 'N/A')}")
    print(f"  Path: {env_path}")

    # Prompt for confirmation unless -y flag is used
    if not skip_confirmation:
        response = input(f"\nAre you sure you want to delete '{env_to_remove}'? [y/N]: ").strip().lower()
        if response not in ['y', 'yes']:
            print("Deletion cancelled.")
            sys.exit(0)

    # Remove from metadata first
    print(f"Removing '{env_to_remove}' from metadata...")
    success, _, _, removed_env = remove_environment_from_metadata(env_to_remove)

    if not success:
        print(f"Error: Failed to remove '{env_to_remove}' from metadata.")
        sys.exit(1)

    # Remove the actual environment files
    print(f"Removing {removed_env}'s files...")
    try:
        # Check if environment directory exists
        if not os.path.exists(env_path):
            print(f"Warning: Environment directory '{env_path}' does not exist.")
            print(f"Metadata for '{env_to_remove}' has been removed.")
        else:
            # Remove the environment directory
            echo_proc = subprocess.Popen(["echo", "y"], stdout=subprocess.PIPE)
            rm_proc = subprocess.Popen(["rm", "-rf", env_path], stdin=echo_proc.stdout,
                                     stdout=subprocess.PIPE, stderr=subprocess.PIPE)
            echo_proc.stdout.close()
            output, error = rm_proc.communicate()

            if rm_proc.returncode != 0:
                print(f"Error removing environment files: {error.decode('utf-8')}")
                sys.exit(1)

            if output:
                print(output.decode('utf-8'))

        print(f"Successfully removed '{env_to_remove}' from {location_desc}")

    except Exception as e:
        print(f"Error removing environment files: {e}")
        sys.exit(1)

    # Log the action
    log_deletion(env_to_remove)


def log_deletion(env_name):
    """Log the delete_venv command usage."""
    logfilePath = os.path.join('<LOGDIR>/venv.log')

    try:
        with open(logfilePath, 'a') as logfile:
            username = getpass.getuser()
            today = datetime.date.today()
            logString = f"{today} {username} delete_venv {env_name}\n"
            logfile.write(logString)
    except FileNotFoundError:
        print("Warning: The log file was not found where it was expected to be")
        print("This action was not logged")
    except Exception as e:
        print(f"Warning: Logging error: {e}")
        print("This action was not logged")


def main():
    parser = argparse.ArgumentParser(
        prog='delete_venv',
        description='Tool used to delete virtual environments created by the ModuLair suite of virtual environment management tools. Can delete both personal and shared group environments.'
    )
    parser.add_argument('env_name', help='The name of the environment you wish to delete')
    parser.add_argument('-y', '--yes', action='store_true', 
                       help='Skip confirmation prompt and delete environment immediately')
    args = parser.parse_args()

    delete_environment(args.env_name, skip_confirmation=args.yes)


if __name__ == "__main__":
    main()
