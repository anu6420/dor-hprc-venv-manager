#!/usr/bin/env python3

# Created 10-31-24 by Gabriel Floreslovo
# This script activates a Python virtual environment stored in a user's $SCRATCH/virtual_envs folder
# or in shared group environments. These venvs are made by 'create_venv'
# Updated to support shared group environments using centralized metadata utilities

import os 
import sys
import argparse

# Import the centralized metadata utilities
from utils import find_environment_by_name, get_environment_path


def print_activation_commands(environment_name):
    
    # Find the environment across all accessible sources
    source_type, source_name, env_dict = find_environment_by_name(environment_name)
    
    if source_type is None:
        print(f"The environment '{environment_name}' does not exist")
        print("Use 'list_venvs' to see all available environments.")
        sys.exit(1)
    
    # Get environment details
    python_version = env_dict.get('python_version', 'N/A')
    gcc_version = env_dict.get('GCCcore_version', 'N/A')
    toolchain = env_dict.get('toolchain', 'N/A')
    
    # Get the activation script path
    try:
        env_path = get_environment_path(environment_name, source_type, source_name)
        activation_script = os.path.join(env_path, "bin", "activate")
    except Exception as e:
        print(f"Error determining environment path: {e}")
        sys.exit(1)
    
    # Print the module load commands based on the environment configuration
    if python_version != "N/A" and python_version != "":
        # Environment was created with a specific Python version
        print(f"ml {gcc_version} {python_version}")
    elif toolchain != "N/A" and toolchain != "":
        # Environment was created with a toolchain
        print(f"ml {toolchain}")
    else:
        # Legacy environment or no modules specified
        # Don't print any module load command - user should have modules already loaded
        pass
    
    # Print the activation command
    print(f"source {activation_script}")


def main():
    # Define and parse script's arguments
    parser = argparse.ArgumentParser(
        prog='json_to_command',
        description='Generates activation commands for virtual environments created by create_venv. Supports both personal and shared group environments.'
    )
    
    parser.add_argument('env_name', help='The name of the virtual environment you want to activate')
    args = parser.parse_args()

    # Print commands necessary for wrapper script to run
    print_activation_commands(args.env_name)


if __name__ == "__main__":
    main()
