#!/usr/bin/env python3

# Created 10-31-24 by Gabriel Floreslovo
# Modified by Ananya Adiki and Surada Suwansathit
# This script lists all of a user's virtual environments created by the create_venv script
# This is achieved by parsing the 'metadata.json' file in the user's '$SCRATCH/virtual_envs/' directory

import json
import os
import sys
import getpass
import datetime
import shutil
import textwrap
import argparse

# Import the centralized metadata utilities
from utils import load_all_metadata, load_user_metadata, load_group_metadata

def get_terminal_width():
    try:
        return shutil.get_terminal_size().columns
    except:
        return 80

def truncate_text(text, max_length):
    if len(text) <= max_length:
        return text
    return text[:max_length-3] + "..."

def wrap_text(text, width):
    if len(text) <= width:
        return [text]
    return textwrap.wrap(text, width=width, break_long_words=True, break_on_hyphens=False)

def print_environments_table(metadata, group_name="your $SCRATCH"):
    if len(metadata.get('environments', [])) == 0:
        print(f"\nYou have no environments in {group_name} currently available through 'activate_venv'\n")
        return

    envs = metadata.get('environments', [])
    try:
        terminal_width = get_terminal_width()
    except:
        terminal_width = 80

    if terminal_width < 120:
        print(f"\nThese are your virtual environments in {group_name} currently available through 'activate_venv':\n")
        for i, env in enumerate(envs, 1):
            name = env.get('name', 'N/A')
            description = env.get('description', 'N/A')
            python_ver = env.get('python_version', 'N/A')
            gcc_ver = env.get('GCCcore_version', 'N/A')
            toolchain = env.get('toolchain', 'N/A')
            owner = env.get('owner', 'N/A')

            print(f"{i:2d}. {name}")
            if description != 'N/A' and description.strip():
                desc_lines = wrap_text(description, terminal_width - 8)
                for line in desc_lines:
                    print(f"    {line}")
            print(f"    Python: {python_ver}  |  GCC: {gcc_ver}")
            if toolchain != 'N/A' and toolchain.strip():
                print(f"    Toolchain: {toolchain}")
            if owner != 'N/A' and owner.strip():
                print(f"    Owner: {owner}")
            if i < len(envs):
                print()
    else:
        print(f"\nThese are your virtual environments in {group_name} currently available through 'activate_venv':\n")

        available_width = terminal_width - 8
        base_widths = [15, 25, 15, 15, 20, 15]
        total_base = sum(base_widths)

        if available_width > total_base:
            extra = available_width - total_base
            col_widths = base_widths.copy()
            col_widths[1] += extra // 2
            col_widths[4] += extra - (extra // 2)
        else:
            ratio = available_width / total_base
            col_widths = [max(8, int(w * ratio)) for w in base_widths]

        headers = ["Name", "Description", "Python Version", "GCC Version", "Toolchain", "Owner"]

        header_row = ""
        for i, header in enumerate(headers):
            header_row += f"{header:<{col_widths[i]}}"
        print(header_row)
        print("-" * sum(col_widths))

        for env in envs:
            row_data = [
                env.get('name', 'N/A'),
                env.get('description', 'N/A'),
                env.get('python_version', 'N/A'),
                env.get('GCCcore_version', 'N/A'),
                env.get('toolchain', 'N/A'),
                env.get('owner', 'N/A')
            ]

            wrapped_columns = []
            max_lines = 1

            for i, text in enumerate(row_data):
                if text and text != 'N/A' and len(text) > col_widths[i] - 1:
                    wrapped = wrap_text(text, col_widths[i] - 1)
                    wrapped_columns.append(wrapped)
                    max_lines = max(max_lines, len(wrapped))
                else:
                    wrapped_columns.append([text])

            for line_num in range(max_lines):
                line = ""
                for col_num, wrapped_col in enumerate(wrapped_columns):
                    text = wrapped_col[line_num] if line_num < len(wrapped_col) else ""
                    line += f"{text:<{col_widths[col_num]}}"
                print(line.rstrip())
def print_env_names(metadata):
    envs = metadata.get('environments', [])
    for env in envs:
        print(env.get('name', 'N/A'))


def print_venvs(args):
    if args.u:
        try:
            metadata = load_user_metadata()
            if args.n:
                print_env_names(metadata)
            else:
                print(json.dumps(metadata, indent=4))
        except Exception as e:
            print(f"Error loading user metadata: {e}")
            sys.exit(1)
        return

    if args.g:
        try:
            all_metadata = load_all_metadata()
            for group_name, group_metadata in all_metadata['groups'].items():
                if args.n:
                    print_env_names(group_metadata)
                else:
                    print(json.dumps(group_metadata, indent=4))
        except Exception as e:
            print(f"Error loading group metadata: {e}")
            sys.exit(1)
        return

    if args.a:
        try:
            all_metadata = load_all_metadata()
            if args.n:
                user_envs = all_metadata['user'].get('environments', [])
                group_envs = []
                for group_metadata in all_metadata['groups'].values():
                    group_envs.extend(group_metadata.get('environments', []))
                all_envs = user_envs + group_envs
                for env in all_envs:
                    print(env.get('name', 'N/A'))
            else:
                print(json.dumps(all_metadata, indent=4))
        except Exception as e:
            print(f"Error loading environment metadata: {e}")
            sys.exit(1)
        return

    # Default behavior: print grouped tables + user envs + example activation
    try:
        all_metadata = load_all_metadata()

        user_envs = all_metadata['user'].get('environments', [])
        groups = all_metadata.get('groups', {})

        # Print all groups with their environment tables
        for group_name, group_metadata in groups.items():
            print_environments_table(group_metadata, f"group '{group_name}'")

        # Print user ($SCRATCH) envs
        print_environments_table(all_metadata['user'], "your $SCRATCH")

        # Show activation example if possible
        example_env = None
        if user_envs:
            example_env = user_envs[0].get('name')
        else:
            for group_metadata in groups.values():
                envs = group_metadata.get('environments', [])
                if envs:
                    example_env = envs[0].get('name')
                    break
        if example_env:
            print(f"\nFor example, to activate '{example_env}' run this command:")
            print(f"$ source activate_venv {example_env}\n")
    except Exception as e:
        print(f"Error loading environment metadata: {e}")
        sys.exit(1)


def log_usage():
    logfilePath = os.path.join('<LOGDIR>/venv.log')
    try:
        with open(logfilePath, 'a') as logfile:
            username = getpass.getuser()
            today = datetime.date.today()
            logString = f"{today} {username} list_venv NA\n"
            logfile.write(logString)
    except FileNotFoundError:
        print("Warning: The log file was not found where it was expected to be")
        print("This action was not logged")
    except Exception as e:
        print(f"Warning: Logging error: {e}")
        print("This action was not logged")


def main():
    parser = argparse.ArgumentParser(description="List Python virtual environments managed by ModuLair.", add_help=False)
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-u", action="store_true", help="List user's $SCRATCH environments in JSON format.")
    group.add_argument("-g", action="store_true", help="List user's group environments in JSON format (all groups).")
    group.add_argument("-a", action="store_true", help="List all user's environments in JSON format (user + groups).")

    parser.add_argument("-n", action="store_true", help="List environment names only (use with -u, -g, or -a).")
    parser.add_argument("-l", action="store_true", help="Disable logging for this run.")
    parser.add_argument("-h", action="store_true", help="Show this help menu.")

    args = parser.parse_args()

    if args.h:
        print("Usage: list_venvs [options]\n")
        print("  -u   list user's $SCRATCH environments in JSON format")
        print("  -g   list user's group environments in JSON format (all groups)")
        print("  -a   list all user's environments in JSON format (user + groups)")
        print("  -n   list environment names only (use with -u, -g, or -a)")
        print("  -h   show this help menu")
        return

    print_venvs(args)
    if not args.l:
        log_usage()


if __name__ == "__main__":
    main()
