#!/usr/bin/env python3

import os
import sys
import json
import subprocess
import argparse
import re
import getpass
import datetime

def get_py_versions():
    captureCommand = "/sw/local/bin/toolchains | grep Python > captured-output.txt"
    removeCommand = "rm captured-output.txt"
    subprocess.run(captureCommand, shell=True)
    py_versions = {}
    tc_versions = {}
    with open("captured-output.txt", "r") as file:
        next(file)
        # Grabbing the Python version and mapping it to corresponding GCC version
        for line in file:
            words = line.split()
            tc_versions[words[0]]  = [words[2], words[6]] 
            if words[6] in py_versions:
                continue
            else:
                py_versions[words[6]] = words[2]
    subprocess.run(removeCommand, shell=True)
    return [py_versions, tc_versions]

def get_user():
    scratch_path = os.environ.get('SCRATCH')
    user = os.path.basename(scratch_path.rstrip('/'))
    return user

def check_group(group):
    user = get_user()
    check_command = f"groups {user} | grep {group} > check.txt"
    removeCommand = "rm check.txt"

    subprocess.run(check_command, shell=True)
    with open("check.txt", "r") as file:
        first_char = file.read(1)
        if not first_char:
            subprocess.run(removeCommand, shell=True)
            return False
    subprocess.run(removeCommand, shell=True)
    return True

def create_virtualenv(venv_name, description, group, toolchain, user_python_version):
    # If toolchain/Python version not provided, check ebroot as normal
    if(user_python_version == "-1" and toolchain == ""):
        # Check to make sure Python is loaded
        eb_root_python = os.environ.get('EBROOTPYTHON')
        if not eb_root_python:
            print("Error: EBROOTPYTHON is not set. Please load a Python module with the 'ml' command.")
            print("Use the 'ml spider' command to see all available versions and how to load a specific version:")
            print("$ ml spider Python")
            print("$ ml spider Python/3.x.x")
            sys.exit(1)

        # Extract Python and GCCcore versions from EBROOTPYTHON path
        python_version_match = re.search(r"Python/(\d+\.\d+\.\d+)", eb_root_python)
        gcccore_version_match = re.search(r"GCCcore-(\d+\.\d+\.\d+)", eb_root_python)

        python_version = f"Python/{python_version_match.group(1)}" if python_version_match else "Python/unknown"
        gcccore_version = f"GCCcore/{gcccore_version_match.group(1)}" if gcccore_version_match else "GCCcore/unknown"
    
    # Otherwise, use the provided python version
    elif(user_python_version != "-1"): 
        _versions = get_py_versions()
        versions = _versions[0]
        python_key = f"Python/{user_python_version}"
        if python_key not in versions:
            print(f"Error: Python version {user_python_version} not available in toolchains.")
            print(f"Available versions: {', '.join(versions.keys())}")
            sys.exit(1)
        gcccore_version = versions[python_key]
    
    # Toolchains does not require a python version, but we still set the variable
    else:
        _tc = get_py_versions()
        versions = _tc[1]
        python_version = versions[toolchain][1]
        gcccore_version = versions[toolchain][0]

    # Validate the environment name
    if not venv_name or not venv_name.isidentifier():
        print("Error: Invalid virtual environment name. It must not contain spaces or special characters.")
        sys.exit(1)

    # Define path
    if group != "":
        if check_group(group):
            venv_path = os.path.join('/', 'scratch', 'group', group, 'virtual_envs', venv_name)
            metadata_file = os.path.join('/', 'scratch', 'group', group, 'virtual_envs', 'metadata.json')
            log_file = os.path.join('/', 'scratch', 'group', group,  'virtual_envs', 'creation.log')
        else:
            print(f"Error: User not in group '{group}'.")
            sys.exit(1)

    else:
        scratch = os.environ.get('SCRATCH')
        venv_path = os.path.join(scratch, 'virtual_envs', venv_name)
        metadata_file = os.path.join(scratch, 'virtual_envs', 'metadata.json')
        log_file = os.path.join(scratch, 'virtual_envs', 'creation.log')

    # Create the virtual environment; there are differences in creation based on options used
    print(f"Creating virtual environment '{venv_name}' in your scratch directory. This may take a minute.")
    creation_command = ""
    if (user_python_version == "-1" and toolchain == ""):
        creation_command = f"python3 -m venv --system-site-packages {venv_path}"
    elif (user_python_version != "-1"):
        creation_command = f"source /etc/profile && module load {gcccore_version} {python_key} && python3 -m venv --system-site-packages {venv_path}"
    else:
        creation_command = f"source /etc/profile && module load {toolchain} && python3 -m venv --system-site-packages {venv_path}"
    subprocess.run(creation_command, shell=True)

    # Upgrade pip and install jupyter if needed
    activate_script = os.path.join(venv_path, 'bin', 'activate')
    activate_command = ""
    if (user_python_version == "-1" and toolchain == ""):
        activate_command = f"source {activate_script}"
    elif (user_python_version != "-1"):
        activate_command = f"source /etc/profile && module load {gcccore_version} {python_key} && source {activate_script}"
    else:
        activate_command = f"source /etc/profile && module load {toolchain} && source {activate_script}"      
    subprocess.run([f"{activate_command} && pip install --upgrade pip"], shell=True)

    # Update the metadata file
    update_metadata(metadata_file, venv_name, python_key if user_python_version != "-1" else python_version, gcccore_version, group, toolchain, description)
    
    # Log
    logfilePath = os.path.join('<LOGDIR>/venv.log')
    try:
        logfile = open(logfilePath,'a')
        username = getpass.getuser()
        today = datetime.date.today()
        logString = f"{today} {username} create_venv {venv_name}\n"
        logfile.write(logString)
    except Exception as e:
        print(f"Error: {e}")
        print("This action was not logged")
        sys.exit(1)

    print("\n")
    print(f"Virtual environment '{venv_name}' created successfully.")
    print(f"To activate, use: source activate_venv {venv_name}")
    print("To see a list of all of your environments and info about them, use: list_venvs")
    print("")
    print("Finally, if you want to use this environment for Jupyter, run \n$ pip install jupyter\nafter activating\n")

def update_metadata(metadata_file, venv_name, python_version, gcccore_version, group, toolchain, description):
    """Updates the metadata JSON file with the environment name, Python and GCCcore versions, and description."""
    if os.path.exists(metadata_file):
        with open(metadata_file, 'r') as f:
            metadata = json.load(f)
    else:
        metadata = {"environments": []}

    metadata["environments"].append({
        "name": venv_name,
        "python_version": python_version,
        "GCCcore_version": gcccore_version,
        "description": description,
        "toolchain": toolchain,
        "group": group,
        "owner": get_user()
    })

    with open(metadata_file, 'w') as f:
        json.dump(metadata, f, indent=4)

def main():
    parser = argparse.ArgumentParser(description="Create a Python virtual environment.")
    parser.add_argument("venv_name", help="Name of the virtual environment (no spaces or special characters)")
    parser.add_argument("-d", "--description", help="Optional description of the environment", default="")
    parser.add_argument("-g", "--group", help="Optional name of the group for shared environment", default="")
    group = parser.add_mutually_exclusive_group()
    group.add_argument("-t", "--toolchain", help="Space-separated list of modules input as a string that should be loaded during creation and before activating the venv", default="")
    group.add_argument("-p", "--python", help="Specify the Python version that this venv should be created for", default="-1")
    args = parser.parse_args()

    print(args)
    create_virtualenv(args.venv_name, args.description, args.group, args.toolchain, args.python)

if __name__ == "__main__":
    main()

